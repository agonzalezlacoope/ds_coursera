m <<- NULL
}
getmatrix <- function() x
setinverse <- function(solve) m <<- solve ## inversa de la matriz
getinverse <- function() m
list(set = setmatrix, get = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## Obtengo la matriz con la funcion getinverse
## Si lo que obtengo NO es nulo está cacheada y devuelvo ese valor
## Si lo que obtengo es nulo no está cacheada
## entonces la calculo y lo cacheo
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if ( !is.null(m) ) {
message ("devuelvo dato de la cache")
return(m)
}
datos <- x$get()
m <- solve(datos, ...)
x$setinverse(m)
m
}
m<-matrix(nrow=2, ncol=3)
m
m<-matrix(rep(1:69, nrow=3, ncol=3)
)
;
m<-matrix(rep(1:6), nrow=3, ncol=3)
m
m<-matrix((1:9), nrow=3, ncol=3)
m
solve(m)
solve(m)
m<-matrix((1:6), nrow=2, ncol=3)
solve(m)
r <- rnorm(1000)
r
m <- matrix( r, nrow=100, ncol=100)
m
solve(m)
m <- makeCacheMatrix()
m
m$set(matrix(1:4),2)
m$setmatrix(matrix(1:4),2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## getmatrix devuelve la matriz
## setmatrix setea la matriz
## getinverse devuelve la inversa de la matriz
## setinverse setea la inversa de la matriz
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve ## inversa de la matriz
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## Obtengo la matriz con la funcion getinverse
## Si lo que obtengo NO es nulo está cacheada y devuelvo ese valor
## Si lo que obtengo es nulo no está cacheada
## entonces la calculo y lo cacheo
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if ( !is.null(m) ) {
message ("devuelvo dato de la cache")
return(m)
}
datos <- x$get()
m <- solve(datos, ...)
x$setinverse(m)
m
}
m <- makeCacheMatrix()
m$set(matrix(1:4),2)
m$set(matrix(1:4),2))
m$set(matrix(1:4,2)
m$get()
m$set(matrix(1:4,2))
m$get()
m$setinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## getmatrix devuelve la matriz
## setmatrix setea la matriz
## getinverse devuelve la inversa de la matriz
## setinverse setea la inversa de la matriz
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function() m <<- solve ## inversa de la matriz
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## Obtengo la matriz con la funcion getinverse
## Si lo que obtengo NO es nulo está cacheada y devuelvo ese valor
## Si lo que obtengo es nulo no está cacheada
## entonces la calculo y lo cacheo
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if ( !is.null(m) ) {
message ("devuelvo dato de la cache")
return(m)
}
datos <- x$get()
m <- solve(datos, ...)
x$setinverse(m)
m
}
m <- makeCacheMatrix()
m$set(matrix(1:4,2))
m$get()
m$setinverse()
m$getinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## getmatrix devuelve la matriz
## setmatrix setea la matriz
## getinverse devuelve la inversa de la matriz
## setinverse setea la inversa de la matriz
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function() inv <<- solve(x) ## inversa de la matriz
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## Obtengo la matriz con la funcion getinverse
## Si lo que obtengo NO es nulo está cacheada y devuelvo ese valor
## Si lo que obtengo es nulo no está cacheada
## entonces la calculo y lo cacheo
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if ( !is.null(m) ) {
message ("devuelvo dato de la cache")
return(m)
}
datos <- x$get()
m <- solve(datos, ...)
x$setinverse(m)
m
}
m$setinverse()
m$getinverse()
m <- makeCacheMatrix()
m$set(matrix(1:4,2))
m$get()
m$setinverse()
m$getinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## getmatrix devuelve la matriz
## setmatrix setea la matriz
## getinverse devuelve la inversa de la matriz
## setinverse setea la inversa de la matriz
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y) {
x <<- y
invmat <<- NULL
}
get <- function() x
setinverse <- function() invmat <<- solve(x) ## inversa de la matriz
getinverse <- function() invmat
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## Obtengo la matriz con la funcion getinverse
## Si lo que obtengo NO es nulo está cacheada y devuelvo ese valor
## Si lo que obtengo es nulo no está cacheada
## entonces la calculo y lo cacheo
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invmat <- x$getinverse()
if ( !is.null(invmat) ) {
message ("devuelvo dato de la cache")
return(invmat)
}
datos <- x$get()
invmat <- solve(datos, ...)
x$setinverse(invmat)
invmat
}
m <- makeCacheMatrix()
m$set(matrix(1:4,2))
m$get()
m$getinverse()
m$setinverse()
m$getinverse()
str(solve)
str(inverse)
str(matrice)
x <- rnorm(100,2,4)
x
summary(x)
str(x)
F <- GL(40,10)
f <- gl(40,10)
str(f)
summary(f)
library(airquality)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100),10,10)
str(m)
m[,1]
meses <- split(airquality, airquality$Month)
meses
str(meses)
x <- rnorm(10,20,2)
x
y <- rnorm(10,20,2)
y
set.seed(1)
y <- rnorm(10,20,2)
y
set.seed(1)
yy <- rnorm(10,20,2)
yy
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
time(sample(1:10, replace=TRUE))
system.time(sample(1:10, replace=TRUE))
system.time(readLines("http://www.jhsph.edu")
)
hilbert <- function(n) {}
hilbert <- function(n) { i<- 1:n 1 /outer(i-1,i,"+")}
summaryRprof()
Rprof()
ls
ls()
summaryRprof()
lm(y~x)
sample.interval=10000
summaryRprof()
$by.total
Rprof()
$by.total
summaryRprof()
$by.total
summaryRprof()
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
e <- rnorm(10,0,20)
y <- 0,5 + 2 * x + e
y <- 0.5 + 2 * x + e
gplot(x.y)
plot(x.y)
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y~x1+x2)
x1<-1
x2<-20
fit <- lm(y~x1+x2)
y<-200
fit <- lm(y~x1+x2)
Rprof(NULL)
summaryRprof()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(Duration)
head(plants$Duration)
head(plants)
head(plants ,10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,  ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance", main="My Plot")
plot(cars , main="My Plot")
plot(cars , main="My Plot", s)
plot(cars , main="My Plot")
plot(cars , sub="My Plot Subtitle")
plot(cars , col=2)
plot(cars , xlim = c(10,15))
plot(cars , pch=2
plot(cars , pch=2)
plot(cars , pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
setwd("~/Documentos/Coursera/ds_coursera/asigment3")
source('rankhospital.R')
rankhospital("MD", "heart failure", 5)
data <- read.csv('outcome-of-care-measures.csv', na.strings="Not Available")
data1 <- subset(data, State="TX")
v_data <- na.omit(data1[,c(1,2,17)])
v_data
v_data[1,]
data1 <- subset(data, State="TX")
data1
data
str(data)
data1 <- subset(data, State="TX")
str(data1)
data1 <- subset(data, State=="TX")
str(data1)
data1 <- subset(data, State=="TX")
str(data1)
data1 <- subset(data, State=='TX')
str(data1)
data1 <- subset(data,State=='TX')
str(data1)
data9 <- subset(data,State=='TX')
str(data9)
View(data1)
str(data1)
data1$State
v_data <- na.omit(data1[,c(1,2,17)])
v_data
View(v_data)
v_data2 <- v_data[order(v_data[,3]),]
View(v_data2)
v_data2 <- v_data[order(v_data[,3], v_data[,2]),]
View(v_data2)
v_data2 <- v_data[order(v_data[,3]),]
v_data2 <- v_data[order(v_data[,3], v_data[,2]),]
source('rankhospital.R')
rankhospital("TX", "heart failure", 3)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 5)
rankhospital("TX", "heart failure", 6)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
states <- data[,State]
states <- data[,'State']
states
?unique
states <- unique(data[,'State'])
states
?each
result <- data.frame()
result
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
?aggregate
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
?numeric
source('rankall.R')
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
source('rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall("heart failure"), 10
rankall("heart failure",10)
rankall("heart failure",dsdd)
source('rankall.R')
rankall("heart failure",dsdd)
rankall("heart failure",'dsdd')
rankall("heart failure",'best')
rankall("heart failure",'worst')
source('rankall.R')
rankall("heart failure",'worst')
source('rankhospital.R')
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
